// <auto-generated />
using System;
using AsyncBreakfastMVC.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AsyncBreakfastMVC.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22");

            modelBuilder.Entity("AsyncBreakfastMVC.Tasks.Models.Bacon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BreakfastId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BreakfastId")
                        .IsUnique();

                    b.ToTable("Bacons");
                });

            modelBuilder.Entity("AsyncBreakfastMVC.Tasks.Models.Breakfast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ActionData")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Breakfasts");
                });

            modelBuilder.Entity("AsyncBreakfastMVC.Tasks.Models.Coffee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BreakfastId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BreakfastId")
                        .IsUnique();

                    b.ToTable("Coffees");
                });

            modelBuilder.Entity("AsyncBreakfastMVC.Tasks.Models.Egg", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BreakfastId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BreakfastId")
                        .IsUnique();

                    b.ToTable("Eggs");
                });

            modelBuilder.Entity("AsyncBreakfastMVC.Tasks.Models.Juice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BreakfastId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BreakfastId")
                        .IsUnique();

                    b.ToTable("Juices");
                });

            modelBuilder.Entity("AsyncBreakfastMVC.Tasks.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AsyncBreakfastMVC.Tasks.Models.Toast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BreakfastId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasButter")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasJam")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BreakfastId");

                    b.ToTable("Toasts");
                });

            modelBuilder.Entity("AsyncBreakfastMVC.Tasks.Models.Bacon", b =>
                {
                    b.HasOne("AsyncBreakfastMVC.Tasks.Models.Breakfast", "Breakfast")
                        .WithOne("Bacon")
                        .HasForeignKey("AsyncBreakfastMVC.Tasks.Models.Bacon", "BreakfastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AsyncBreakfastMVC.Tasks.Models.Breakfast", b =>
                {
                    b.HasOne("AsyncBreakfastMVC.Tasks.Models.Order", "Order")
                        .WithOne("Breakfast")
                        .HasForeignKey("AsyncBreakfastMVC.Tasks.Models.Breakfast", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AsyncBreakfastMVC.Tasks.Models.Coffee", b =>
                {
                    b.HasOne("AsyncBreakfastMVC.Tasks.Models.Breakfast", "Breakfast")
                        .WithOne("Coffee")
                        .HasForeignKey("AsyncBreakfastMVC.Tasks.Models.Coffee", "BreakfastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AsyncBreakfastMVC.Tasks.Models.Egg", b =>
                {
                    b.HasOne("AsyncBreakfastMVC.Tasks.Models.Breakfast", "Breakfast")
                        .WithOne("Egg")
                        .HasForeignKey("AsyncBreakfastMVC.Tasks.Models.Egg", "BreakfastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AsyncBreakfastMVC.Tasks.Models.Juice", b =>
                {
                    b.HasOne("AsyncBreakfastMVC.Tasks.Models.Breakfast", "Breakfast")
                        .WithOne("Juice")
                        .HasForeignKey("AsyncBreakfastMVC.Tasks.Models.Juice", "BreakfastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AsyncBreakfastMVC.Tasks.Models.Toast", b =>
                {
                    b.HasOne("AsyncBreakfastMVC.Tasks.Models.Breakfast", "Breakfast")
                        .WithMany("Toasts")
                        .HasForeignKey("BreakfastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
